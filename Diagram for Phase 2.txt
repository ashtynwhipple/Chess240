actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #navy Registration #white
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username;

break
DataAccess-->Service: UserData
Service-->Server: throw new AlreadyTakenError()
Server-->Client: HTTP 403 "Error: Already Taken"
end

DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end




group #orange Login #white
Client -> Server: [POST] /session\n{"username": " ", "password": " "}
Server -> Handler: {"username": " ", "password": " "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username

break
DataAccess-->Service: null
Service --> Server: { "message": "Error: unauthorized" }
Server --> Client: 401\n{ "message": "Error: unauthorized" } 
end

DataAccess --> Service: UserData

Service->Service: verify_password(known_password, provided_password)

break
Service --> Server: { "message": "Error: unauthorized" }
Server --> Client: 401\n{ "message": "Error: unauthorized" } 
end

Service -> DataAccess: createAuth(authData)
DataAccess -> db: Add AuthData
Service --> Handler: LoginResult
Handler --> Server: { "username":"", "authToken":"" }
Server --> Client: 200\n{ "username":"", "authToken":"" }
end





group #green Logout #white
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: { "authToken": " " }
Handler -> Service: logout(authToken)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken
DataAccess --> Service: AuthData

break
DataAccess-->Service: null
Service --> Server: { "message": "Error: unauthorized" }
Server --> Client: 401\n{ "message": "Error: unauthorized" }
end

Service -> DataAccess: deleteAuth(authToken)
DataAccess -> db: Remove AuthData

break
Service --> Server: { "message": "Error: could not clear Authdata" }
Server --> Client: 500\n{ "message": "Error: could not clear Authdata" }
end

Service --> Handler: LogoutResult
Handler --> Server: {}
Server --> Client: 200\n{}

end





group #red List Games #white
Client -> Server: [GET] /game\nauthToken
Server -> Handler: { "authToken": " " }
Handler -> Service: listGames(authToken)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken

break
DataAccess-->Service: null
Service --> Server: { "message": "Error: unauthorized" }
Server --> Client: 401\n{ "message": "Error: unauthorized" }
end

DataAccess --> Service: AuthData

Service -> DataAccess: getGames()
DataAccess -> db: Retrieve List of Games
DataAccess --> Service: GamesList
Service --> Handler: { "games": [{"gameID": 1234, "whiteUsername":"",\n "blackUsername":"", "gameName":""}] }
Handler --> Server: { "games": [{"gameID": 1234, "whiteUsername":"",\n "blackUsername":"", "gameName":""}] }
Server --> Client: 200\n{ "games": [{"gameID": 1234, "whiteUsername":"",\n "blackUsername":"", "gameName":""}] }

end





group #purple Create Game #white
Client -> Server: [POST] /game\nauthToken\n{"gameName":""}
Server -> Handler: { "authToken": " ", "gameName":"" }
Handler -> Service: createGame(CreateGameRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken

break
DataAccess-->Service: null
Service --> Server: { "message": "Error: unauthorized" }
Server --> Client: 401\n{ "message": "Error: unauthorized" }
end

DataAccess --> Service: AuthData

Service -> DataAccess: createGame(gameData)
DataAccess -> db: Insert New Game

break
Service --> Server: { "message": "Error: bad request" }
Server --> Client: 400\n{ "message": "Error: bad request" }
end

DataAccess --> Service: { "gameID": 1234 }
Service --> Handler: { "gameID": 1234 }
Handler --> Server: { "gameID": 1234 }
Server --> Client: 200\n{ "gameID": 1234 }

end





group #yellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{"playerColor":"WHITE/BLACK", \n"gameID": 1234}
Server -> Handler: { "authToken": " ", "playerColor":\n "WHITE/BLACK", "gameID": 1234 }
Handler -> Service: joinGame(JoinGameRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find AuthData by authToken

break
DataAccess-->Service: null
Service --> Server: { "message": "Error: unauthorized" }
Server --> Client: 401\n{ "message": "Error: unauthorized" }
end

DataAccess --> Service: AuthData

Service -> DataAccess: getGame(gameID)
DataAccess -> db: Find Game by gameID

break
DataAccess --> Service: null
Service --> Server: { "message": "Error: bad request" }
Server --> Client: 400\n{ "message": "Error: bad request" }
end

DataAccess --> Service: GameData
Service -> DataAccess: assignPlayerToGame(gameID, playerColor, username)
DataAccess -> db: Update Game with Player Assignment

break
Service --> Server: { "message": "Error: already taken" }
Server --> Client: 403\n{ "message": "Error: already taken" }
end

Service --> Handler: JoinGameResult
Handler --> Server: {}
Server --> Client: 200\n{}



end





group #gray Clear Application #white
Client -> Server: [DELETE] /db
Server -> Handler: {}
Handler -> Service: clearDatabase()

Service -> DataAccess: clearAuthData()
DataAccess -> db: Remove AuthData

break
Service --> Server: { "message": "Error: could not clear Authdata" }
Server --> Client: 500\n{ "message": "Error: could not clear Authdata" }
end

Service -> DataAccess: clearGameData()
DataAccess -> db: Remove Games

break
Service --> Server: { "message": "Error: could not clear GameData" }
Server --> Client: 500\n{ "message": "Error: could not clear GameData" }
end

Service -> DataAccess: clearUserData()
DataAccess -> db: Remove Users

break
Service --> Server: { "message": "Error: could not clear Userdata" }
Server --> Client: 500\n{ "message": "Error: could not clear Userdata" }
end

DataAccess --> Service: Success
Service --> Handler: ClearDatabaseResult
Handler --> Server: {}
Server --> Client: 200\n{}




end

